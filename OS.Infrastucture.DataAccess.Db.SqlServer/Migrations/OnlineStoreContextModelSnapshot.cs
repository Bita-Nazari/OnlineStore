// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OS.Infrastucture.Db.SqlServer.DataBase;

#nullable disable

namespace OS.Infrastucture.Db.SqlServer.Migrations
{
    [DbContext(typeof(OnlineStoreContext))]
    partial class OnlineStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Wallet")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BidCount")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("StartPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Auction", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SuggestedPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bid", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedalId");

                    b.HasIndex("SellerId");

                    b.ToTable("Booth", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "کالای دیجیتال"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "خانه وآشپزخانه"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "مد و پوشاک"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "کتاب و لوازم تحریر"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "اسباب بازی،کودک و نوزاد"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "زیبایی و سلامت"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "ورزش و سفر"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "ابزارآلات و تجهیزات"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "اکسسوری"
                        });
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "یزد",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "میبد",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "همدان",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "ملایر",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "بندرعباس",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "میناب",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "اراک",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "خمین",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "ساری",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "بابل",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 11,
                            Name = "بروجرد",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "کوهدشت",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 13,
                            Name = "آستارا",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 14,
                            Name = "بندر انزلی",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 15,
                            Name = "گرگان",
                            ProvinceId = 8
                        },
                        new
                        {
                            Id = 16,
                            Name = "گنبدکاووس",
                            ProvinceId = 8
                        },
                        new
                        {
                            Id = 17,
                            Name = "یاسوج",
                            ProvinceId = 9
                        },
                        new
                        {
                            Id = 18,
                            Name = "دهدشت",
                            ProvinceId = 9
                        },
                        new
                        {
                            Id = 19,
                            Name = "جوانرود",
                            ProvinceId = 10
                        },
                        new
                        {
                            Id = 20,
                            Name = "کرمانشاه",
                            ProvinceId = 10
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان",
                            ProvinceId = 11
                        },
                        new
                        {
                            Id = 22,
                            Name = "رفسنجان",
                            ProvinceId = 11
                        },
                        new
                        {
                            Id = 23,
                            Name = "سنندج",
                            ProvinceId = 12
                        },
                        new
                        {
                            Id = 24,
                            Name = "سقز",
                            ProvinceId = 12
                        },
                        new
                        {
                            Id = 25,
                            Name = "قم",
                            ProvinceId = 13
                        },
                        new
                        {
                            Id = 26,
                            Name = "جعفریه",
                            ProvinceId = 13
                        },
                        new
                        {
                            Id = 27,
                            Name = "قزوین",
                            ProvinceId = 14
                        },
                        new
                        {
                            Id = 28,
                            Name = "تاکستان",
                            ProvinceId = 14
                        },
                        new
                        {
                            Id = 29,
                            Name = "کازرون",
                            ProvinceId = 15
                        },
                        new
                        {
                            Id = 30,
                            Name = "مرودشت",
                            ProvinceId = 15
                        },
                        new
                        {
                            Id = 31,
                            Name = "زاهدان",
                            ProvinceId = 16
                        },
                        new
                        {
                            Id = 32,
                            Name = "چابهار",
                            ProvinceId = 16
                        },
                        new
                        {
                            Id = 33,
                            Name = "شاهرود",
                            ProvinceId = 17
                        },
                        new
                        {
                            Id = 34,
                            Name = "دامغان",
                            ProvinceId = 17
                        },
                        new
                        {
                            Id = 35,
                            Name = "زنجان",
                            ProvinceId = 18
                        },
                        new
                        {
                            Id = 36,
                            Name = "ابهر",
                            ProvinceId = 18
                        },
                        new
                        {
                            Id = 37,
                            Name = "دزفول",
                            ProvinceId = 19
                        },
                        new
                        {
                            Id = 38,
                            Name = "اهواز",
                            ProvinceId = 19
                        },
                        new
                        {
                            Id = 39,
                            Name = "بجنورد",
                            ProvinceId = 20
                        },
                        new
                        {
                            Id = 40,
                            Name = "شیروان",
                            ProvinceId = 20
                        },
                        new
                        {
                            Id = 41,
                            Name = "نیشابور",
                            ProvinceId = 21
                        },
                        new
                        {
                            Id = 42,
                            Name = "سبزوار",
                            ProvinceId = 21
                        },
                        new
                        {
                            Id = 43,
                            Name = "بیرجند",
                            ProvinceId = 22
                        },
                        new
                        {
                            Id = 44,
                            Name = "فردوس",
                            ProvinceId = 22
                        },
                        new
                        {
                            Id = 45,
                            Name = "شهرکرد",
                            ProvinceId = 23
                        },
                        new
                        {
                            Id = 46,
                            Name = "بروجن",
                            ProvinceId = 23
                        },
                        new
                        {
                            Id = 47,
                            Name = "تهران",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 48,
                            Name = "ری",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 49,
                            Name = "پاکدشت",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 50,
                            Name = "ورامین",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 51,
                            Name = "بندربوشهر",
                            ProvinceId = 25
                        },
                        new
                        {
                            Id = 52,
                            Name = "برازجان",
                            ProvinceId = 25
                        },
                        new
                        {
                            Id = 53,
                            Name = "ایلام",
                            ProvinceId = 26
                        },
                        new
                        {
                            Id = 54,
                            Name = "ایوان",
                            ProvinceId = 26
                        },
                        new
                        {
                            Id = 55,
                            Name = "اشتهارد",
                            ProvinceId = 27
                        },
                        new
                        {
                            Id = 56,
                            Name = "طالقان",
                            ProvinceId = 27
                        },
                        new
                        {
                            Id = 57,
                            Name = "کاشان",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 58,
                            Name = "اصفهان",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 59,
                            Name = "اردبیل",
                            ProvinceId = 29
                        },
                        new
                        {
                            Id = 60,
                            Name = "پارس آباد",
                            ProvinceId = 29
                        },
                        new
                        {
                            Id = 61,
                            Name = "مشکین شهر",
                            ProvinceId = 29
                        },
                        new
                        {
                            Id = 62,
                            Name = "ارومیه",
                            ProvinceId = 30
                        },
                        new
                        {
                            Id = 63,
                            Name = "خوی",
                            ProvinceId = 30
                        },
                        new
                        {
                            Id = 64,
                            Name = "بوکان",
                            ProvinceId = 30
                        },
                        new
                        {
                            Id = 65,
                            Name = "میانه",
                            ProvinceId = 31
                        },
                        new
                        {
                            Id = 66,
                            Name = "سراب",
                            ProvinceId = 31
                        },
                        new
                        {
                            Id = 67,
                            Name = "تبریز",
                            ProvinceId = 31
                        },
                        new
                        {
                            Id = 68,
                            Name = "اسلام شهر",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 69,
                            Name = "شهریار",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 70,
                            Name = "خمینی شهر",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 71,
                            Name = "نجف اباد",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 72,
                            Name = "شاهین شهر",
                            ProvinceId = 28
                        });
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Wallet")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PictureId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("MedalTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedalTypeId");

                    b.ToTable("Medal", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.MedalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MedalType", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Commession")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfilePicture")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Picture", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductBooth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("NewPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoothId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBooth", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBoothId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductBoothId");

                    b.ToTable("ProductCarts");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrder", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " یزد"
                        },
                        new
                        {
                            Id = 2,
                            Name = " همدان"
                        },
                        new
                        {
                            Id = 3,
                            Name = " هرمزگان"
                        },
                        new
                        {
                            Id = 4,
                            Name = " مرکزی"
                        },
                        new
                        {
                            Id = 5,
                            Name = " مازندران"
                        },
                        new
                        {
                            Id = 6,
                            Name = " لرستان"
                        },
                        new
                        {
                            Id = 7,
                            Name = " گیلان"
                        },
                        new
                        {
                            Id = 8,
                            Name = " گلستان"
                        },
                        new
                        {
                            Id = 9,
                            Name = " کهگیلویه و بویر احمد"
                        },
                        new
                        {
                            Id = 10,
                            Name = " کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Name = " کرمان"
                        },
                        new
                        {
                            Id = 12,
                            Name = " کردستان"
                        },
                        new
                        {
                            Id = 13,
                            Name = " قم"
                        },
                        new
                        {
                            Id = 14,
                            Name = " قزوین"
                        },
                        new
                        {
                            Id = 15,
                            Name = " فارس"
                        },
                        new
                        {
                            Id = 16,
                            Name = " سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = " سمنان"
                        },
                        new
                        {
                            Id = 18,
                            Name = " زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Name = " خوزستان"
                        },
                        new
                        {
                            Id = 20,
                            Name = " خراسان شمالی"
                        },
                        new
                        {
                            Id = 21,
                            Name = " خراسان رضوی"
                        },
                        new
                        {
                            Id = 22,
                            Name = " خراسان جنوبی"
                        },
                        new
                        {
                            Id = 23,
                            Name = " چهارمحال بختیاری"
                        },
                        new
                        {
                            Id = 24,
                            Name = " تهران"
                        },
                        new
                        {
                            Id = 25,
                            Name = " بوشهر"
                        },
                        new
                        {
                            Id = 26,
                            Name = " ایلام"
                        },
                        new
                        {
                            Id = 27,
                            Name = " البرز"
                        },
                        new
                        {
                            Id = 28,
                            Name = " اصفهان"
                        },
                        new
                        {
                            Id = 29,
                            Name = " اردبیل"
                        },
                        new
                        {
                            Id = 30,
                            Name = " آذربایجان غربی"
                        },
                        new
                        {
                            Id = 31,
                            Name = " آذربایجان شرقی"
                        });
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("NationalCode")
                        .HasColumnType("bigint");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<long>("ShabaNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Wallet")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PictureId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "موبایل"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "لپ تاپ"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "دوربین"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "کنسول بازی"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "کامپیوتر و تجهیزات"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "ساعت دیجیتال"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "شستشو و نظافت"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "آشپزخانه"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "سرو پذیرایی"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "لوازم خانگی برقی"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "فرش و گلیم"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "دکوراسیون"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "مردانه"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "زنانه"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "بچگانه"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "کفش "
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "کتاب"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "مجلات"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "لوازم تحریر"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            IsDeleted = false,
                            Name = "تغذیه و رشد کودک"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            IsDeleted = false,
                            Name = "بهداشت و حمام"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "لوازم آرایشی"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "لوازم بهداشتی"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "لوازم شخصی برقی"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "عطر و ادکلن"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            IsDeleted = false,
                            Name = "پوشاک ورزشی"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 7,
                            IsDeleted = false,
                            Name = "کفش ورزشی"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 7,
                            IsDeleted = false,
                            Name = "لوازم ورزشی"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            IsDeleted = false,
                            Name = "ابزار غیربرقی"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            IsDeleted = false,
                            Name = "باغبانی و کشاورزی"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 8,
                            IsDeleted = false,
                            Name = "ابزار برقی و شارژی"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 9,
                            IsDeleted = false,
                            Name = "گردنبند"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 9,
                            IsDeleted = false,
                            Name = "انگشتر"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 9,
                            IsDeleted = false,
                            Name = "عینک آفتابی"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 9,
                            IsDeleted = false,
                            Name = "دستبند"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 9,
                            IsDeleted = false,
                            Name = "کلاه"
                        });
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OS.Domain.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Admin", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("OS.Domain.Core.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Auction", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Booth", "Booth")
                        .WithMany("Auctions")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Booth");

                    b.HasOne("OS.Domain.Core.Entities.Customer", "Winner")
                        .WithMany("Auctions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Auction_Customer");

                    b.HasOne("OS.Domain.Core.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Product");

                    b.Navigation("Booth");

                    b.Navigation("Product");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Bid", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bid_Auction");

                    b.HasOne("OS.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Bids")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bid_Customer");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Booth", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Medal", "Medal")
                        .WithMany("Booths")
                        .HasForeignKey("MedalId")
                        .IsRequired()
                        .HasConstraintName("FK_Booth_Medal");

                    b.HasOne("OS.Domain.Core.Entities.Seller", "Seller")
                        .WithMany("Booths")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Booth_Seller");

                    b.Navigation("Medal");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Cart", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Booth", null)
                        .WithMany("Carts")
                        .HasForeignKey("BoothId");

                    b.HasOne("OS.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.City", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_City_Province");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Comment", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Booth", "Booth")
                        .WithMany("Comments")
                        .HasForeignKey("BoothId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Booth");

                    b.HasOne("OS.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Customer");

                    b.HasOne("OS.Domain.Core.Entities.Order", "Order")
                        .WithMany("Comments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Order");

                    b.Navigation("Booth");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Customer", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_City");

                    b.HasOne("OS.Domain.Core.Entities.Picture", "Picture")
                        .WithMany("Customers")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Picture");

                    b.HasOne("OS.Domain.Core.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("OS.Domain.Core.Entities.Customer", "UserId");

                    b.Navigation("City");

                    b.Navigation("Picture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Medal", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.MedalType", "MedalType")
                        .WithMany("Medals")
                        .HasForeignKey("MedalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Medal_MedalType");

                    b.Navigation("MedalType");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Order", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Cart", "Cart")
                        .WithMany("Orders")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Cart");

                    b.HasOne("OS.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("OS.Domain.Core.Entities.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Status");

                    b.Navigation("Cart");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Product", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Product_SubCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductBooth", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Booth", "booth")
                        .WithMany("ProductBooths")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ProductBooth_Booth");

                    b.HasOne("OS.Domain.Core.Entities.Product", "Product")
                        .WithMany("ProductBooths")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ProductBooth_Product");

                    b.Navigation("Product");

                    b.Navigation("booth");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductCart", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCart_Cart");

                    b.HasOne("OS.Domain.Core.Entities.ProductBooth", "ProductBooth")
                        .WithMany()
                        .HasForeignKey("ProductBoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCart_Product");

                    b.Navigation("Cart");

                    b.Navigation("ProductBooth");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductOrder", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductOrder_Order");

                    b.HasOne("OS.Domain.Core.Entities.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductOrder_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.ProductPicture", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Picture", "Picture")
                        .WithMany("ProductPictures")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductPicture_Picture");

                    b.HasOne("OS.Domain.Core.Entities.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductPicture_Product");

                    b.Navigation("Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Seller", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.City", "City")
                        .WithMany("Sellers")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Seller_City");

                    b.HasOne("OS.Domain.Core.Entities.Picture", "Picture")
                        .WithMany("Sellers")
                        .HasForeignKey("PictureId")
                        .IsRequired()
                        .HasConstraintName("FK_Seller_Picture");

                    b.HasOne("OS.Domain.Core.Entities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("OS.Domain.Core.Entities.Seller", "UserId");

                    b.Navigation("City");

                    b.Navigation("Picture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.SubCategory", b =>
                {
                    b.HasOne("OS.Domain.Core.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Booth", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("ProductBooths");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Cart", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Customer", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Medal", b =>
                {
                    b.Navigation("Booths");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.MedalType", b =>
                {
                    b.Navigation("Medals");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Order", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Picture", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("ProductPictures");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("ProductBooths");

                    b.Navigation("ProductOrders");

                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Seller", b =>
                {
                    b.Navigation("Booths");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OS.Domain.Core.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });
#pragma warning restore 612, 618
        }
    }
}
